#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
//#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioPlaySdWav           playSdWav1;     //xy=269,390
AudioPlaySdWav           playSdWav2;     //xy=270,453
AudioPlaySdWav           playSdWav3;     //xy=270,508
AudioMixer4              mixer1;         //xy=475,399
AudioMixer4              mixer2;         //xy=626,472
AudioOutputI2S           i2s1;           //xy=803,476
AudioConnection          patchCord1(playSdWav1, 0, mixer1, 0);
AudioConnection          patchCord2(playSdWav1, 1, mixer1, 1);
AudioConnection          patchCord3(playSdWav2, 0, mixer1, 2);
AudioConnection          patchCord4(playSdWav2, 1, mixer1, 3);
AudioConnection          patchCord5(playSdWav3, 0, mixer2, 1);
AudioConnection          patchCord6(playSdWav3, 1, mixer2, 2);
AudioConnection          patchCord7(mixer1, 0, mixer2, 0);
AudioConnection          patchCord8(mixer2, 0, i2s1, 0);
AudioConnection          patchCord9(mixer2, 0, i2s1, 1);
AudioControlSGTL5000     sgtl5000_1;     //xy=495,301
// GUItool: end automatically generated code

// Use these with the Teensy Audio Shield
#define SDCARD_CS_PIN    10
#define SDCARD_MOSI_PIN  7
#define SDCARD_SCK_PIN   14

void setup() {
  //Serial.begin(9600);
  //while(!Serial){
  //  ;
  //}
  
  //Left Photo Diodes
  pinMode(0, INPUT);
  pinMode(1, INPUT);
  pinMode(2, INPUT);
  pinMode(3, INPUT);
  //Right Photo Diodes
  pinMode(4, INPUT);
  pinMode(5, INPUT);
  pinMode(15, INPUT);
  pinMode(8, INPUT);
  
  // Audio connections require memory to work.  For more
  // detailed information, see the MemoryAndCpuUsage example
  AudioMemory(8);

  // Comment these out if not using the audio adaptor board.
  // This may wait forever if the SDA & SCL pins lack
  // pullup resistors
  sgtl5000_1.enable();
  sgtl5000_1.volume(0.5);

  SPI.setMOSI(SDCARD_MOSI_PIN);
  SPI.setSCK(SDCARD_SCK_PIN);
  if (!(SD.begin(SDCARD_CS_PIN))) {
    // stop here, but print a message repetitively
    //while (1) {
    //  Serial.println("Unable to access the SD card");
    //  delay(500);
    //}
  }
}

void playThree(const char *filename1, const char *filename2, const char *filename3)
{
  playSdWav1.play(filename1);
  playSdWav2.play(filename2);
  playSdWav3.play(filename3);

  
  // A brief delay for the library to read WAV info
  delay(1000);

  // Simply wait for the file to finish playing.
  while (playSdWav1.isPlaying() || playSdWav2.isPlaying()|| playSdWav3.isPlaying()) {
    ;
  }
}

void playTwo(const char *filename1, const char *filename2)
{
  playSdWav1.play(filename1);
  playSdWav2.play(filename2);

  // A brief delay for the library to read WAV info
  delay(1000);

  // Simply wait for the file to finish playing.
  while (playSdWav1.isPlaying() || playSdWav2.isPlaying()) {
    ;
  }
}

void playOne(const char *filename1)
{
  playSdWav1.play(filename1);

  // A brief delay for the library to read WAV info
  delay(250);

  // Simply wait for the file to finish playing.
//  while (playSdWav1.isPlaying()) {
//    ;
//  }
}

void loop() {
  //playThree("C4.WAV","E4.WAV","G4.WAV");
  if (!digitalRead(3)) {
    playOne("C6.WAV");
  }
  else if (!digitalRead(2)) {
    playOne("B5.WAV");
  }
  else if (!digitalRead(1)) {
    playOne("A5.WAV");
  }
  else if (!digitalRead(0)) {
    playOne("G5.WAV");
  }
  else if (!digitalRead(4)) {
    playOne("F5.WAV");
  }
  else if (!digitalRead(5)) {
    playOne("E5.WAV");
  }
  else if (!digitalRead(15)) {
    playOne("D5.WAV");
  }
  else if (!digitalRead(8)) {
    playOne("C5.WAV");
  }
}
