#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
//#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioPlaySdWav           playSdWav1;     //xy=269,390
AudioPlaySdWav           playSdWav2;     //xy=270,453
AudioPlaySdWav           playSdWav3;     //xy=270,508
AudioMixer4              mixer1;         //xy=475,399
AudioMixer4              mixer2;         //xy=626,472
AudioOutputI2S           i2s1;           //xy=803,476
AudioConnection          patchCord1(playSdWav1, 0, mixer1, 0);
AudioConnection          patchCord2(playSdWav1, 1, mixer1, 1);
AudioConnection          patchCord3(playSdWav2, 0, mixer1, 2);
AudioConnection          patchCord4(playSdWav2, 1, mixer1, 3);
AudioConnection          patchCord5(playSdWav3, 0, mixer2, 1);
AudioConnection          patchCord6(playSdWav3, 1, mixer2, 2);
AudioConnection          patchCord7(mixer1, 0, mixer2, 0);
AudioConnection          patchCord8(mixer2, 0, i2s1, 0);
AudioConnection          patchCord9(mixer2, 0, i2s1, 1);
AudioControlSGTL5000     sgtl5000_1;     //xy=495,301
// GUItool: end automatically generated code

// Use these with the Teensy Audio Shield
#define SDCARD_MOSI_PIN  7
#define SDCARD_CS_PIN    10
#define SDCARD_SCK_PIN   14

void setup() {
//  Serial.begin(9600);
//  while(!Serial){
//    ;
//  }
  
  //Right Photo Diodes
  pinMode(0, INPUT);
  pinMode(1, INPUT);
  pinMode(2, INPUT);
  pinMode(3, INPUT);
  //Left Photo Diodes
  pinMode(4, INPUT);
  pinMode(5, INPUT);
  pinMode(6, INPUT);
  pinMode(8, INPUT);
  //Buttons
  pinMode(20, INPUT);
  pinMode(21, INPUT);
  
  // Audio connections require memory to work.  For more
  // detailed information, see the MemoryAndCpuUsage example
  AudioMemory(8);

  // Comment these out if not using the audio adaptor board.
  // This may wait forever if the SDA & SCL pins lack
  // pullup resistors
  sgtl5000_1.enable();
  sgtl5000_1.volume(0.5);

  SPI.setMOSI(SDCARD_MOSI_PIN);
  SPI.setSCK(SDCARD_SCK_PIN);
  if (!(SD.begin(SDCARD_CS_PIN))) {
    // stop here, but print a message repetitively
//    while (1) {
//      Serial.println("Unable to access the SD card");
//      delay(500);
//    }
  }
}

void playThree(const char *filename1, const char *filename2, const char *filename3)
{
  playSdWav1.play(filename1);
  playSdWav2.play(filename2);
  playSdWav3.play(filename3);

  // A brief delay for the library to read WAV info
  delay(250);

  // Simply wait for the file to finish playing.
//  while (playSdWav1.isPlaying() || playSdWav2.isPlaying()|| playSdWav3.isPlaying()) {
//    ;
//  }
}

void playTwo(const char *filename1, const char *filename2)
{
  playSdWav1.play(filename1);
  playSdWav2.play(filename2);

  // A brief delay for the library to read WAV info
  delay(250);

  // Simply wait for the file to finish playing.
//  while (playSdWav1.isPlaying() || playSdWav2.isPlaying()) {
//    ;
//  }
}

void playOne(const char *filename1)
{
  playSdWav1.play(filename1);

  // A brief delay for the library to read WAV info
  delay(250);

  // Simply wait for the file to finish playing.
//  while (playSdWav1.isPlaying()) {
//    ;
//  }
}

String notes[] = {"C2.WAV","Csharp2.WAV","D2.WAV","Dsharp2.WAV","E2.WAV","F2.WAV",
"Fsharp2.WAV","G2.WAV","Gsharp2.WAV","A2.WAV","Asharp2.WAV","B2.WAV",
"C3.WAV","Csharp3.WAV","D3.WAV","Dsharp3.WAV","E3.WAV","F3.WAV",
"Fsharp3.WAV","G3.WAV","Gsharp3.WAV","A3.WAV","Asharp3.WAV","B3.WAV",
"C4.WAV","Csharp4.WAV","D4.WAV","Dsharp4.WAV","E4.WAV","F4.WAV",
"Fsharp4.WAV","G4.WAV","Gsharp4.WAV","A4.WAV","Asharp4.WAV","B4.WAV",
"C5.WAV","Csharp5.WAV","D5.WAV","Dsharp5.WAV","E5.WAV","F5.WAV",
"Fsharp5.WAV","G5.WAV","Gsharp5.WAV","A5.WAV","Asharp5.WAV","B5.WAV","C6.WAV"};
bool strings[] = {false, false, false, false, false, false, false, false};
int majorScale[] = {0,2,4,5,7,9,11,12};
int minorScale[] = {0,2,3,5,7,8,10,12};
int sizeOfNotes = sizeof(notes)/sizeof(String);
int startIndex = 24;
int offsets[] = {-1,-1,-1};
int oldOffsets[] = {0,0,0};
int numStrings = 0;
bool newNote = true;
bool major = true;

void loop() {
  if (!digitalRead(20) and !digitalRead(21)) {
    if (major) {
      major = false;
    }
    else {
      major = true;
    }
    while (!digitalRead(20) and !digitalRead(21)) {
      ;
    }
  }
  else if (!digitalRead(20)) {
    startIndex--;
    if (startIndex < 0) {
      startIndex = sizeOfNotes-13;
    }
    delay(500);
  }
  else if (!digitalRead(21)) {
    startIndex++;
    if (startIndex > sizeOfNotes-13) {
      startIndex = 0;
    }
    delay(500);
  }
  if (!digitalRead(8)) {
    strings[7] = true;
  }
  if (!digitalRead(6)) {
    strings[6] = true;
  }
  if (!digitalRead(5)) {
    strings[5] = true;
  }
  if (!digitalRead(4)) {
    strings[4] = true;
  }
  if (!digitalRead(0)) {
    strings[3] = true;
  }
  if (!digitalRead(1)) {
    strings[2] = true;
  }
  if (!digitalRead(2)) {
    strings[1] = true;
  }
  if (!digitalRead(3)) {
    strings[0] = true;
  }
  for (int i = 0; i < 8; i++) {
    if (strings[i]) {
      numStrings++;
      if (major) {
        offsets[numStrings-1] = majorScale[i];
      }
      else {
        offsets[numStrings-1] = minorScale[i];
      }
      if (numStrings == 3) {
        break;
      }
    }
  }
  for (int i = 0; i < 3; i++) {
    if (offsets[i] != oldOffsets[i]) {
      newNote = true;
    }
  }
  if (newNote) {
    if (numStrings == 1) {
      playOne((notes[startIndex + offsets[0]]).c_str());
    }
    else if (numStrings == 2) {
      playTwo((notes[startIndex + offsets[0]]).c_str(),(notes[startIndex + offsets[1]]).c_str());
    }
    else if (numStrings == 3) {
      playThree((notes[startIndex + offsets[0]]).c_str(),(notes[startIndex + offsets[1]]).c_str(),(notes[startIndex + offsets[2]]).c_str());
    }
    for (int i = 0; i < 3; i++) {
      oldOffsets[i] = offsets[i];
    }
  }
  numStrings = 0;
  offsets[0] = -1;
  offsets[1] = -1;
  offsets[2] = -1;
  strings[0] = false;
  strings[1] = false;
  strings[2] = false;
  strings[3] = false;
  strings[4] = false;
  strings[5] = false;
  strings[6] = false;
  strings[7] = false;
  newNote = false;
}
